pipeline {
    agent any
    environment {
        TEST_IP = sh(script: "aws ec2 describe-instances --region eu-central-1 --filters Name=tag:tagas,Values=test --query 'Reservations[].Instances[].PublicIpAddress' --output text", returnStdout: true).trim()
        PROD_IP = sh(script: "aws ec2 describe-instances --region eu-central-1 --filters Name=tag:tagas,Values=prod --query 'Reservations[].Instances[].PublicIpAddress' --output text", returnStdout: true).trim()
    }
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages {
        stage('Cleanup') {
            steps {
                sh 'echo "Performing cleanup..."'
                sh 'rm -rf *'
            }
        }
        stage('Build') {
            steps {
                sh 'echo "Cloning repository..."'
                sh 'git clone https://github.com/Orelbaz/flask-docker.git'
                sh 'ls'
                sh 'echo "Docking..."'
                dir('/var/lib/jenkins/workspace/docker-pipeline/flask-docker/CoinSite') {
                    sh 'docker build -t orelbaz/flak-docker:1.0 .'
                    sh 'echo "Pushing to DockerHub"'
                    sh 'docker push orelbaz/flak-docker:1.0'
                }
            }
        }
        stage('Test-server') {
            steps {
                sh "/bin/bash /var/lib/jenkins/workspace/docker-pipeline/flask-docker/deploy.sh ${TEST_IP}"
                sh 'echo "Running tests..."'
                sh '/bin/bash "/var/lib/jenkins/workspace/docker-pipeline/flask-docker/Testing.sh"'
            }
        }
        stage('Approve') {
            steps {
                sh 'echo "Waiting for approval..."'
                // For auto approval, add '//' before the input line. For manual approval, remove '//' from the input line
                input 'Do you want to deploy the project to production?'
            }
        }
        stage('Prod-server') {
            steps { 
                sh "/bin/bash /var/lib/jenkins/workspace/docker-pipeline/flask-docker/deploy.sh ${PROD_IP}"
            }
        }
    }
}
